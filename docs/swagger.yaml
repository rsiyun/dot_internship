basePath: /
definitions:
  domain.Book:
    properties:
      category:
        $ref: '#/definitions/domain.Category'
      categoryID:
        type: integer
      createdAt:
        type: string
      description:
        type: string
      id:
        type: integer
      title:
        type: string
      updatedAt:
        type: string
      writer:
        type: string
    type: object
  domain.Category:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  dto.BookErrorResponse:
    properties:
      message:
        type: string
    type: object
  dto.BookRequest:
    properties:
      categoryID:
        type: integer
      description:
        maxLength: 1000
        type: string
      title:
        maxLength: 100
        minLength: 3
        type: string
      writer:
        maxLength: 100
        minLength: 3
        type: string
    required:
    - categoryID
    - title
    - writer
    type: object
  dto.BookResponse:
    properties:
      category:
        $ref: '#/definitions/dto.CategoryResponse'
      categoryid:
        type: integer
      description:
        type: string
      id:
        type: integer
      title:
        type: string
      writer:
        type: string
    type: object
  dto.CategoryCreate:
    properties:
      name:
        maxLength: 100
        minLength: 1
        type: string
    required:
    - name
    type: object
  dto.CategoryResponse:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  dto.CountBooksByCategory:
    properties:
      count:
        type: integer
      message:
        type: string
    type: object
  dto.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  dto.Login:
    properties:
      email:
        type: string
      password:
        maxLength: 100
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  dto.LoginResponse:
    properties:
      message:
        type: string
      token:
        type: string
    type: object
  dto.MultipleBookResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/domain.Book'
        type: array
      message:
        type: string
    type: object
  dto.MultipleCategoryResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/domain.Category'
        type: array
      message:
        type: string
    type: object
  dto.Register:
    properties:
      email:
        type: string
      name:
        maxLength: 100
        minLength: 1
        type: string
      password:
        maxLength: 100
        minLength: 6
        type: string
    required:
    - email
    - name
    - password
    type: object
  dto.SingleBookResponse:
    properties:
      data:
        $ref: '#/definitions/dto.BookResponse'
      message:
        type: string
    type: object
  dto.SingleCategoryResponse:
    properties:
      data:
        $ref: '#/definitions/dto.CategoryResponse'
      message:
        type: string
    type: object
  dto.ValidationError:
    properties:
      message:
        type: string
      object:
        additionalProperties:
          type: string
        type: object
    type: object
host: 127.0.0.1:1323
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server Petstore server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Swagger Example API
  version: "1.0"
paths:
  /admin/book:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all books
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MultipleBookResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BookErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all books
      tags:
      - books
    post:
      consumes:
      - application/json
      description: Add a new book to the database
      parameters:
      - description: Book data
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/dto.BookRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SingleBookResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BookErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new book
      tags:
      - books
  /admin/book/{id}:
    delete:
      consumes:
      - application/json
      description: Remove a book from the database by its ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SingleBookResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BookErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BookErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a book
      tags:
      - books
    get:
      consumes:
      - application/json
      description: Retrieve a single book by its ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SingleBookResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BookErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BookErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a book by ID
      tags:
      - books
    put:
      consumes:
      - application/json
      description: Update the details of an existing book
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated book data
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/dto.BookRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SingleBookResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BookErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BookErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BookErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a book
      tags:
      - books
  /admin/book/category/{category_id}:
    get:
      consumes:
      - application/json
      description: Retrieve all books that belong to a specific category
      parameters:
      - description: Category ID
        in: path
        name: category_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MultipleBookResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BookErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BookErrorResponse'
      security:
      - BearerAuth: []
      summary: Get books by category
      tags:
      - books
  /admin/book/category/{category_id}/count:
    get:
      consumes:
      - application/json
      description: Count the number of books in a specific category
      parameters:
      - description: Category ID
        in: path
        name: category_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CountBooksByCategory'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BookErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BookErrorResponse'
      security:
      - BearerAuth: []
      summary: Count books by category
      tags:
      - books
  /admin/category:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MultipleCategoryResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all categories
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: Add a new category to the database
      parameters:
      - description: Category data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/dto.CategoryCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SingleCategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new category
      tags:
      - categories
  /admin/category/:id:
    delete:
      consumes:
      - application/json
      description: Delete Category to database
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SingleCategoryResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete Category
      tags:
      - categories
    put:
      consumes:
      - application/json
      description: Update Category to database
      parameters:
      - description: Category data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/dto.CategoryCreate'
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SingleCategoryResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update Category
      tags:
      - categories
  /admin/category/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a single category by its ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SingleCategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a category by ID
      tags:
      - categories
  /login:
    post:
      consumes:
      - application/json
      description: Login ke akun yang sudah ada
      parameters:
      - description: Login
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Login Account
      tags:
      - Auth
  /register:
    post:
      consumes:
      - application/json
      description: Mendaftar akun
      parameters:
      - description: Register form
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.Register'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Register Account
      tags:
      - Auth
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
